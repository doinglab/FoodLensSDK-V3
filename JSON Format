{
  "version":Int,                        //Data format version 
  "date": String,                       //Date for logging (yyyy-MM-dd HH:mm:ss)
  "type": String,                       //Meal type breakfast, lunch, dinner, snack, morning_snack, afternoon_snack, late_night_snack
  "imagePath": String,                  //Image path
  "userComment" : String,               //User comment
  "foods": [
    {
      "eatAmount": Double,              //User selected eat amount based on 1 portion
      "name":String,                    //Food name(Return empty string if matched food is none)
      "fullName":String                 //Full food name (Food name can be combined with ingredients)
      "candidates": [                   //Food candidates
        {
            "id": Int,                   //ID for food. (Unique ID is for food. -1 if value is none. In case of CaloAI(Foodlens 2.0) return -1)
            "manufacturer": String,      //Manufacturer, only proudct provides manufacturer. Other case return empty string
            "foodName": String,          //Food name (Return empty string if matched food is none)
            "fullFoodName": String,      //Full food name (In case of CaloAI, food name can be combined with ingredients)
            "foodType": String,          //Food type (Alcohol, etc)
            "servingSize": Double,       //Serving size
            "totalServingSize" Double    //Total serving size (In case of product, serving size and total serving size can be different)
            "unit": String,              //Unit (g, ml)
            "counts": String,            //Counts(Bowl, etc)
            "countsDetail": [{           //count detail value
                           "countType": "serving",//countType can be “serving” and “total”. If one serving value and total serving value are different “total” value will be provided together.
                            "servingSize": 388.0,
                            "countsValue": 1.0,
                            "counts": "plate(L)",
                            "subCountsValue": -1.0, //This value is used as a sub-unit.
                            "subCounts": ""
             }],
            "estimatedAmount": {
                  "estimatedServingSize": Double,      //Estimated serving size (g, ml)
                  "estimatedServingAmount": Double,    //Estimated serving amount. 
                  "estimatedVolume": Double,           //Estimated bowl volume
                  "estimatedPortion": Double,          //Estimated food portion in bowl (ratio) 
                  "estimatedPlateType": String,        //Estimated bowl type
            },
            ingredients: [{
                  "name": String,              //Ingredient name
                  "gram": Double,              //Ingredient weight (Only you can get this information when you have permission, return -1 if value is not exist)
            }],
            // Calories nutrients
            "energy": Double,            //Total energy(Calorie), Unit Kcal (Return -1 if value is not exist)
            "carbohydrate": Double,      //Total carbohydrate, Unit g (Return -1 if value is not exist)
            "protein": Double,           //Total protein, Unit g (Return -1 if value is not exist)
            "fat": Double,               //Total fat, Unit g (Return -1 if value is not exist)
            "totalSugars": Double,       //Total sugars, Unit g (Return -1 if value is not exist)
            "totalDietaryFiber": Double, //Total dietary fiber, Unit g (Return -1 if value is not exist)
            // Mineral
            "calcium": Double,           //Total calcium, Unit mg (Return -1 if value is not exist)
            "iron": Double,              //Total iron, Unit mg (Return -1 if value is not exist)
            "magnesium": Double,         //Total magnesium, Unit mg (Return -1 if value is not exist)
            "phosphorus": Double,        //Total phosphorus, Unit mg (Return -1 if value is not exist)
            "potassium": Double,         //Total potassium, Unit mg (Return -1 if value is not exist)
            "sodium": Double,            //Total sodium, Unit mg (Return -1 if value is not exist)
            "zinc": Double,              //Total zinc, Unit mg (Return -1 if value is not exist)
            "selenium": Double,          //Total selenium, Unit μg (Return -1 if value is not exist)
            // Vitamin
            "retinol": Double,           //Total retinol, Unit μg (Return -1 if value is not exist)
            "betaCarotene": Double,      //Total betaCarotene, Unit μg (Return -1 if value is not exist)
            "vitaminA": Double,          //Total vitaminA, Unit μg (Return -1 if value is not exist)
            "thiamin": Double,           //Total thiamin(vitamin B1), Unit mg  (Return -1 if value is not exist)
            "riboflavin": Double,        //Total riboflavin(vitamin B2), Unit mg (Return -1 if value is not exist)
            "niacin": Double,            //Total niacin, Unit mg (Return -1 if value is not exist)
            "vitaminB6": Double,         //Total vitamin B6, Unit mg (Return -1 if value is not exist)
            "biotin": Double,            //Total biotin, Unit μg (Return -1 if value is not exist)
            "totalFolate": Double,       //Total folate(DEF), Unit μg (Return -1 if value is not exist)
            "vitaminC": Double,          //Total vitamin C, Unit mg (Return -1 if value is not exist)
            "vitaminD": Double,          //Total vitamin D, Unit μg (Return -1 if value is not exist)
            "vitaminE": Double,          //Total vitamin E, Unit mg (Return -1 if value is not exist)
            "vitaminK": Double,          //Total vitamin K, Unit μg (Return -1 if value is not exist)
            // Essential amino acids
            "isoleucine": Double,        //Total isoleucine, Unit mg (Return -1 if value is not exist)
            "leucine": Double,           //Total leucine, Unit mg (Return -1 if value is not exist)
            "valine": Double,            //Total valine, Unit mg (Return -1 if value is not exist)
            "bcaa": Double,              //Total branched-chain amino acid, Unit mg (Return -1 if value is not exist)
            // Fatty acid
            "cholesterol": Double,       //Total cholesterol, Unit mg (Return -1 if value is not exist)
            "saturatedFattyAcid": Double,//Total saturated fatty acid, Unit g (Return -1 if value is not exist)
            "epa": Double,               //Total epa, Unit mg (Return -1 if value is not exist)
            "dha": Double,               //Total dha (Return -1 if value is not exist)
            "omega3FattyAcid": Double,   //Total omega3 fatty acid, Unit g (Return -1 if value is not exist)
            "omega6FattyAcid": Double,   //Total omega6 fatty acid, Unit g (Return -1 if value is not exist)
            "transFattyAcid": Double,    //Total trans fatty acid, Unit g (Return -1 if value is not exist)
            // Food group
            "grainGroup": Double,        //Grain group (Only you can get this information when you have permission,return -1 if value is not exist)
            "proteinGroup": Double,      //Protein gruop (Only you can get this information when you have permission,return -1 if value is not exist)
            "vegetableGroup": Double,    //Vegetable group (Only you can get this information when you have permission,return -1 if value is not exist)
            "fruitGroup": Double,        //Fruit group (Only you can get this information when you have permission,return -1 if value is not exist)
            "oilGroup": Double,          //Oil group (Only you can get this information when you have permission,return -1 if value is not exist)
            "sugarGroup": Double,        //Sugar group (Only you can get this information when you have permission,return -1 if value is not exist)
            "dairyGroup": Double,        //Dairy group (Only you can get this information when you have permission,return -1 if value is not exist)
          }]
      ingredients: [{
            "name": String,              //Ingredient name
            "key" : String,              //Ingredient key value
            "gram": Double,              //Ingredient weight (Only you can get this information when you have permission, return -1 if value is not exist)
        }],
      "userSelected": Nutrition,         //Food nutrition inforation which is selected by user. In case  of CoreSDK, this value will be null
      "estimatedAmount": {
            "estimatedServingSize": Double,      //Estimated serving size (g, ml)
            "estimatedServingAmount": Double,    //Estimated serving amount. 
            "estimatedVolume": Double,           //Estimated bowl volume
            "estimatedPortion": Double,          //Estimated food portion in bowl (ratio) 
            "estimatedPlateType": String,        //Estimated bowl type
      },
      "position": {                       //Food position
            "xmax": Int,
            "xmin": Int,
            "ymax": Int,
            "ymin": Int
      },
    }
  ],
}
